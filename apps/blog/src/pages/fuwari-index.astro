---
import { getCollection } from 'astro:content';
import FuwariLayout from '~/layouts/FuwariLayout.astro';
import Hero from '~/components/fuwari/Hero.astro';
import FeaturedPosts from '~/components/fuwari/FeaturedPosts.astro';
import Categories from '~/components/fuwari/Categories.astro';
import Newsletter from '~/components/fuwari/Newsletter.astro';
import type { NotionCollection, NotionItem } from '../types/notion';
import { SITE } from 'astrowind:config';

// Get all blog posts from notion collection
const notionPosts = await getCollection('notion') as unknown as NotionCollection;

// Sort posts by date
const sortedPosts = notionPosts
  .sort((a: NotionItem, b: NotionItem) => {
    const dateA = a.data.properties?.date?.date?.start ? new Date(a.data.properties.date.date.start) : new Date();
    const dateB = b.data.properties?.date?.date?.start ? new Date(b.data.properties.date.date.start) : new Date();
    return dateB.valueOf() - dateA.valueOf();
  });

// Get featured posts (most recent 6)
const featuredPosts = sortedPosts.slice(0, 6).map((post: NotionItem) => {
  const title = post.data.properties?.Name?.title?.[0]?.plain_text || 'Untitled';
  const excerpt = post.data.properties?.summary?.rich_text?.[0]?.plain_text || '';
  const date = post.data.properties?.date?.date?.start ? new Date(post.data.properties.date.date.start) : new Date();
  const slug = post.data.properties?.slug?.rich_text?.[0]?.plain_text || post.id;
  const tags = post.data.properties?.tags?.multi_select?.map(tag => tag.name) || [];
  
  return {
    id: post.id,
    slug,
    title,
    description: excerpt,
    image: post.data.cover ? post.data.cover.external?.url || post.data.cover.file?.url : undefined,
    publishDate: date,
    excerpt,
    tags,
    readingTime: Math.ceil(excerpt.length / 200) // Rough estimate
  };
});

// Extract all tags from posts and count occurrences
const tagCounts = sortedPosts.reduce((acc, post: NotionItem) => {
  const tags = post.data.properties?.tags?.multi_select || [];
  tags.forEach(tag => {
    if (tag.name) {
      acc[tag.name] = (acc[tag.name] || 0) + 1;
    }
  });
  return acc;
}, {} as Record<string, number>);

// Convert to array and sort by count
const categories = Object.entries(tagCounts)
  .map(([name, count]) => ({ 
    name, 
    count: count as number,
    // Map some common categories to icons
    icon: {
      'technology': 'tabler:device-laptop',
      'design': 'tabler:palette',
      'programming': 'tabler:code',
      'tutorial': 'tabler:book',
      'news': 'tabler:news',
      'personal': 'tabler:user',
    }[name.toLowerCase()] || undefined
  }))
  .sort((a, b) => b.count - a.count)
  .slice(0, 8); // Take top 8 categories
---

<FuwariLayout>
  <Hero 
    title={SITE?.name || "Notion Astro Blog"}
    subtitle="A beautiful blog powered by Notion and Astro"
    tagline="Share your thoughts with the world"
  />
  
  <div class="container-fuwari">
    <FeaturedPosts 
      title="Latest Articles"
      subtitle="Check out our most recent blog posts"
      posts={featuredPosts}
      moreUrl="/blog"
    />
    
    {categories.length > 0 && (
      <Categories
        title="Browse by Category"
        subtitle="Find posts on topics that interest you"
        categories={categories}
      />
    )}
    
    <Newsletter />
  </div>
</FuwariLayout>
