---
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash } from '~/utils/permalinks';

import { socialLinks } from '~/constants/social';
import { routes } from '~/constants/navigation';

import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { Icon } from 'astro-icon/components';
import Button from '../ui/Button.astro';
import ToggleTheme from '../common/ToggleTheme.astro';

export interface Props {
  class?: string;
}

const { class: className } = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  id="header"
  class:list={[
    'pointer-events-none sticky top-0 z-50 mx-auto max-w-7xl px-0 transition-all duration-700 md:px-4',
    className,
  ]}
>
  <div id="navbar-wrapper" class="pointer-events-auto relative top-0 transition-all">
    <WidgetWrapper as="div" containerClass="z-50 flex items-center justify-between !py-4">
      <a class="btn btn-ghost flex size-fit items-center border-none" href={getHomePermalink()}>
        <Icon class="size-6" name="material-symbols:home-outline-rounded" />
        <Logo class="m-0 text-lg" />
      </a>
      <section class="hidden gap-2 md:flex">
        {
          routes.map((item) => (
            <a class="btn btn-sm btn-ghost hover:text-primary flex size-fit items-center border-none" href={item.url}>
              {item.label}
            </a>
          ))
        }
      </section>
      <section class="flex">
        <ToggleTheme />
      </section>
    </WidgetWrapper>
  </div>

  <!-- <div class="text-default mx-auto w-full max-w-7xl px-3 py-3 md:grid md:grid-cols-3 md:items-center md:px-6">
    <div class="flex justify-between">
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <div class="flex justify-between">
      <HeaderDock client:load groups={[routes, socialLinks]} />
    </div>
  </div> -->
  <!-- <header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 mx-auto w-full flex-none border-b border-gray-50/0 transition-[opacity] ease-in-out',
    className,
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'text-default relative mx-auto w-full px-3 py-3 md:px-6',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-3 md:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:ml-auto rtl:mr-0': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="text-default hidden w-full items-center overflow-y-auto overflow-x-hidden md:mx-5 md:flex md:w-auto md:justify-self-center md:overflow-x-auto md:overflow-y-visible"
      aria-label="Main navigation"
    >
      <ul
        class="flex w-full flex-col text-xl font-medium tracking-[0.01rem] md:w-auto md:flex-row md:justify-center md:self-center md:text-[0.9375rem]"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link flex items-center whitespace-nowrap px-4 py-3 dark:hover:text-white"
                  >
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="ml-0.5 hidden h-3.5 w-3.5 md:inline rtl:ml-0 rtl:mr-0.5" />
                  </button>
                  <ul class="dropdown-menu dark:md:bg-dark rounded pl-4 font-medium drop-shadow-xl md:absolute md:hidden md:min-w-[200px] md:bg-white/90 md:pl-0 md:backdrop-blur-md">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'hover:text-link whitespace-no-wrap block px-5 py-2 first:rounded-t last:rounded-b md:hover:bg-gray-100 dark:hover:bg-gray-700 dark:hover:text-white',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link flex items-center whitespace-nowrap px-4 py-3 dark:hover:text-white',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'fixed bottom-0 left-0 hidden w-full items-center justify-end p-3 md:static md:mb-0 md:flex md:w-auto md:self-center md:justify-self-end md:p-0 rtl:left-auto rtl:right-0',
      ]}
    >
      <div class="flex w-full items-center justify-between md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-muted inline-flex items-center rounded-lg p-2.5 text-sm hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="h-5 w-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="px-5.5 ml-2 w-auto py-2.5 text-sm font-semibold shadow-none md:px-6" />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header> -->
</header>
